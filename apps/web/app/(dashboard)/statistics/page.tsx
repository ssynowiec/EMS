import { StatsPieChartWithLegend } from '../../../components/statsPieChart/StatsPieChartWithLegend';
import type { Metadata } from 'next';
import {
	AreaChart as AreaChartTremor,
	Card,
	Grid,
	Tab,
	TabGroup,
	TabList,
	TabPanel,
	TabPanels,
	Title,
} from '@tremor/react';
import { env } from '../../../env.d.mjs';

export const metadata: Metadata = {
	title: 'Statistics',
	description: 'Generated by create turbo',
};

const API_URL = env.NEXT_PUBLIC_API_URL;

const getUsers = async () => {
	const res = await fetch(`${API_URL}/users`, {
		method: 'GET',
		cache: 'no-cache',
	});

	return await res.json();
};

const usersWithStatus = (usersData) => {
	function countUsersWithStatus(
		users: { name: string; status: string }[],
		status: string,
	): number {
		const filteredUsers = users.filter((user) => user.status === status);
		return filteredUsers.length;
	}

	const activeUsers = countUsersWithStatus(usersData, 'ACTIVE');
	const bannedUsers = countUsersWithStatus(usersData, 'BLOCKED');
	const unverifiedUsers = countUsersWithStatus(usersData, 'UNVERIFIED');

	console.log(activeUsers, bannedUsers, unverifiedUsers);

	return [
		{ name: 'Active', value: activeUsers },
		{ name: 'Unverified', value: unverifiedUsers },
		{ name: 'Banned', value: bannedUsers },
	];
};

const getRegisteredUsersLastWeek = (usersData) => {
	const today = new Date();
	const monthNames = [
		'Jan',
		'Feb',
		'Mar',
		'Apr',
		'May',
		'Jun',
		'Jul',
		'Aug',
		'Sep',
		'Oct',
		'Nov',
		'Dec',
	];
	const chartData: { date: string; 'Registered users': number }[] = [];

	for (let i = 0; i < 7; i++) {
		let registeredUsers = 0;
		const date = new Date(today);
		date.setDate(today.getDate() - (6 - i));

		usersData.forEach((user: { name: string; createdAt: Date }) => {
			const userDate = new Date(user.createdAt);
			if (
				userDate.getDate() === date.getDate() &&
				userDate.getMonth() === date.getMonth()
			) {
				registeredUsers++;
			}
		});

		const day = date.getDate();
		const month = monthNames[date.getMonth()];

		chartData.push({
			date: i === 6 ? 'today' : `${day} ${month}`,
			'Registered users': registeredUsers,
		});
	}

	return chartData;
};

const getUsersByRole = (usersData) => {
	function countUsersWithRole(
		users: { name: string; role: string }[],
		role: string,
	): number {
		const filteredUsers = users.filter((user) => user.role === role);
		return filteredUsers.length;
	}

	const admins = countUsersWithRole(usersData, 'ADMIN');
	const users = countUsersWithRole(usersData, 'USER');

	return [
		{ name: 'Admins', value: admins },
		{ name: 'Users', value: users },
	];
};

const Statistics = async () => {
	const users = await getUsers();

	const usersStatus = usersWithStatus(users);
	const registeredUsersLastWeek = getRegisteredUsersLastWeek(users);
	const usersByRole = getUsersByRole(users);

	return (
		<>
			<h1>Stats</h1>

			<TabGroup className="mt-6">
				<TabList>
					<Tab>Users</Tab>
					<Tab>Detail</Tab>
				</TabList>
				<TabPanels>
					<TabPanel>
						<Grid numItemsMd={2} numItemsLg={3} className="gap-6 mt-6">
							<StatsPieChartWithLegend
								title="Users status"
								data={usersStatus}
								categories={[
									'Active users',
									'Unverified users',
									'Blocked users',
								]}
								colors={['green', 'yellow', 'red']}
							/>
							<StatsPieChartWithLegend
								title="Users by role"
								data={usersByRole}
								categories={['Admins', 'Users']}
								type="pie"
								colors={['red', 'green', 'indigo', 'rose', 'cyan', 'amber']}
							/>
							<Card></Card>
						</Grid>
						<div className="mt-6">
							<Card>
								<Title>Users registered on last week</Title>
								<AreaChartTremor
									className="h-72 mt-4"
									data={registeredUsersLastWeek}
									index="date"
									showAnimation={true}
									categories={['Registered users']}
									colors={['indigo']}
								/>
							</Card>
						</div>
					</TabPanel>
					<TabPanel>
						<div className="mt-6">
							<Card>
								<div className="h-96" />
							</Card>
						</div>
					</TabPanel>
				</TabPanels>
			</TabGroup>
		</>
	);
};

export default Statistics;
