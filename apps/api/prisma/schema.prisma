datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ADMIN
  USER
}

enum Status {
  ACTIVE
  BLOCKED
  UNVERIFIED
}

enum EventStatus {
  PUBLISHED
  DRAFT
  DELETED
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  role          Role        @default(USER)
  emailVerified DateTime?
  status        Status      @default(UNVERIFIED)
  password      String?
  image         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  accounts      Account[]
  sessions      Session[]
  events        Event[]     @relation("Organizer")
  // attendees     Event[]     @relation("Attendees")
  Attendees     Attendees[]
}

model VerificationToken {
  identifier String   @default(uuid())
  token      String   @unique
  expires    DateTime
  used       Boolean  @default(false)
  userId     String

  @@unique([identifier, token])
}

model Event {
  id          String      @id @default(uuid())
  status      EventStatus @default(DRAFT)
  name        String
  description String?
  image       String?
  date        DateTime
  location    String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  organizer   User        @relation("Organizer", fields: [organizerID], references: [id], onDelete: Cascade)
  organizerID String
  // attendees   User[]      @relation("Attendees")
  Attendees   Attendees[]
}

model Attendees {
  eventId String
  userId  String
  event   Event  @relation(fields: [eventId], references: [id])
  user    User   @relation(fields: [userId], references: [id])

  @@id([eventId, userId])
}
